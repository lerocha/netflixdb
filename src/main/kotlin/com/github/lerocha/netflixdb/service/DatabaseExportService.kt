package com.github.lerocha.netflixdb.service

import com.github.lerocha.netflixdb.entity.AbstractEntity
import org.hibernate.boot.MetadataSources
import org.hibernate.boot.registry.StandardServiceRegistryBuilder
import org.hibernate.tool.hbm2ddl.SchemaExport
import org.hibernate.tool.schema.TargetType
import org.slf4j.LoggerFactory
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties
import org.springframework.stereotype.Service
import java.io.File
import java.time.OffsetDateTime
import java.util.EnumSet

@Service
class DatabaseExportService(
    private val dataSourceProperties: DataSourceProperties,
    private val databaseStrategyFactory: DatabaseStrategyFactory,
) {
    private val logger = LoggerFactory.getLogger(javaClass)

    fun exportSchema(
        title: String,
        databaseName: String,
        filename: String,
        entityClasses: List<Class<out AbstractEntity>>,
    ) {
        File(filename).parentFile.mkdirs()
        val settings =
            mutableMapOf<String, Any>(
                "connection.driver_class" to dataSourceProperties.driverClassName,
                "hibernate.connection.url" to dataSourceProperties.url,
                "hibernate.connection.username" to dataSourceProperties.username,
                "hibernate.connection.password" to dataSourceProperties.password,
                "hibernate.hbm2ddl.auto" to "create",
                "show_sql" to "true",
                "hibernate.implicit_naming_strategy" to "org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy",
                "hibernate.physical_naming_strategy" to "org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy",
            )

        val metadata =
            MetadataSources(
                StandardServiceRegistryBuilder()
                    .applySettings(settings)
                    .build(),
            ).addAnnotatedClasses(*entityClasses.toTypedArray()).buildMetadata()

        File(filename).writeText(
            """
            /**********************************************************************************
              $title for ${databaseName.uppercase()}
              Description: Creates and populates the $title.
              Created on: ${OffsetDateTime.now()}
              Author: Luis Rocha
              License: https://github.com/lerocha/netflixdb/blob/main/LICENSE
               
              WARNING: This file was generated by a tool and changes to this file will be lost
                       when this file is regenerated.
            ***********************************************************************************/
            ${databaseStrategyFactory.getInstance(databaseName).getInitDatabase()}
            """.trimIndent(),
        )

        SchemaExport()
            .setHaltOnError(true)
            .setFormat(true)
            .setDelimiter(";")
            .setOutputFile(filename)
            .execute(EnumSet.of(TargetType.SCRIPT), SchemaExport.Action.CREATE, metadata)

        File(filename).appendText("\n\n")
        logger.info("Exported schema for $databaseName to $filename")
    }

    fun getInsertStatement(
        databaseName: String,
        data: List<AbstractEntity>,
    ): String = databaseStrategyFactory.getInstance(databaseName).getInsertStatement(data)
}
